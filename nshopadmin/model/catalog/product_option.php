<?php/* * To change this template, choose Tools | Templates * and open the template in the editor. */class ModelCatalogProductOption extends Model {    public function addOption($product_id, $data) {        //try{	   //d($data,1);        foreach ($data['option']['old'] as $option_id => $value) {            if ($value['name'] != '') {                $sql = "UPDATE `product_option`                    SET sort_order = '" . $value['sort_order'] . "',                        product_option_type_id = '" . (int) $value['product_option_type_id'] . "',                        parent_id = '" . (int) $value['parent_id'] . "'                    WHERE product_option_id = " . $option_id;                $this->db->query($sql);                $sql = "UPDATE `product_option_description`                    SET language_id = '" . $value['language_id'] . "',                        name = '" . $value['name'] . "'                    WHERE product_option_id = " . $option_id;                $this->db->query($sql);            }        }        foreach ($data['option']['new'] as $value) {            if ($value['name'] != '') {                $sql = "INSERT INTO `product_option`                        SET product_id = '" . $product_id . "',                            sort_order = '" . $value['sort_order'] . "',                            parent_id = '" . (int) $value['parent_id'] . "',                            product_option_type_id = '" . (int) $value['product_option_type_id'] . "'";                $this->db->query($sql);                $product_option_id = $this->db->getLastId();                $sql = "INSERT INTO `product_option_description`                     SET product_option_id = '" . $product_option_id . "',                         product_id = '" . $product_id . "',                             language_id = '" . $value['language_id'] . "',                                 name = '" . $value['name'] . "'";                $this->db->query($sql);            }        }	$iQty = 0;        foreach ($data['option_value']['old'] as $product_option_value_id => $value) {            if ($value['name'] != '') {                $sql = "UPDATE `product_option_value`                    SET product_option_id = '" . $value['product_option_id'] . "',                        `quantity` = '" . $value['quantity'] . "',                        `subtract` = '" . $value['subtract'] . "',                        `prefix` = '" . $value['prefix'] . "',                        `thumb` = '" . $value['thumb'] . "',                        `image` = '" . $value['image'] . "',                        `price` = '" . $value['price'] . "',                        `sort_order` = '" . $value['sort_order'] . "',                        `min_size` = '" . (int) $value['min_size'] . "',                        `max_size` = '" . (int) $value['max_size'] . "'                    WHERE product_option_value_id = '" . $product_option_value_id . "'";                $this->db->query($sql);                $sql = "UPDATE `product_option_value_description`                        SET language_id = '" . $value['language_id'] . "',                            name = '" . $value['name'] . "',                            help = '" . $value['help'] . "'                        WHERE product_option_value_id = " . $product_option_value_id;                $this->db->query($sql);		$iQty += $value['quantity'];            }        }        foreach ($data['option_value']['new'] as $value) {            if ($value['name'] != '') {                $sql = "INSERT INTO `product_option_value`                        SET product_option_id = '" . $value['product_option_id'] . "',                            `product_id` = '" . $product_id . "',                            `quantity` = '" . $value['quantity'] . "',                            `subtract` = '" . $value['subtract'] . "',                            `thumb` = '" . $value['thumb'] . "',                            `image` = '" . $value['image'] . "',                            `price` = '" . $value['price'] . "',                            `prefix` = '" . $value['prefix'] . "',                            `sort_order` = '" . $value['sort_order'] . "',                            `min_size` = '" . (int) $value['min_size'] . "',                            `max_size` = '" . (int) $value['max_size'] . "'";                $this->db->query($sql);                $product_option_value_id = $this->db->getLastId();                $sql = "INSERT INTO `product_option_value_description`                        SET product_option_value_id = '" . $product_option_value_id . "',                            product_id = '" . $product_id . "',                            language_id = '" . $value['language_id'] . "',                            name = '" . $value['name'] . "',                            help = '" . $value['help'] . "'";                $this->db->query($sql);		        $iQty += $value['quantity'];            }        }		    if($iQty > 0 && $product_id > 0){    	    $oModel = Make::a('catalog/product')->find_one($product_id);    	    $oModel->quantity = $iQty;           // d($oModel,1);    	    $oModel->save();	    }    }    public function addGeneralOption($product_id, $option_id, $aValues = array()) {        $sql = "SELECT * FROM `product_option_description` d LEFT JOIN `product_option` o  ON o.product_option_id = d.product_option_id WHERE o.product_option_id = " . (int) $option_id . " AND o.product_id = -1";        $query = $this->db->query($sql);        foreach ($query->rows as $aOption) {            $sql = "INSERT INTO `product_option`                    SET product_id = '" . $product_id . "',                        sort_order = '" . $aOption['sort_order'] . "',                        parent_id = '" . (int) $aOption['parent_id'] . "',                        product_option_type_id = '" . (int) $aOption['product_option_type_id'] . "'";            $this->db->query($sql);            $product_option_id = $this->db->getLastId();            $sql = "INSERT INTO `product_option_description`                     SET product_option_id = '" . $product_option_id . "',                         product_id = '" . $product_id . "',                         language_id = '" . $aOption['language_id'] . "',                         name = '" . $aOption['name'] . "'";            $this->db->query($sql);            $sql = "SELECT * FROM `product_option_value` ov LEFT JOIN `product_option_value_description` vd  ON ov.product_option_value_id = vd.product_option_value_id WHERE product_option_id = '" . $aOption['product_option_id'] . "' AND ov.product_id = -1";            $query_value = $this->db->query($sql);            foreach ($query_value->rows as $aValue) {                $bPass = false;                if ($aValues && in_array($aValue['product_option_value_id'], $aValues)) {                    $bPass = true;                }                if ($bPass) {                    $sql = "INSERT INTO `product_option_value`                        SET product_option_id = '" . $product_option_id . "',                            `product_id` = '" . $product_id . "',                            `quantity` = '" . $aValue['quantity'] . "',                            `subtract` = '" . $aValue['subtract'] . "',                            `thumb` = '" . $aValue['thumb'] . "',                            `image` = '" . $aValue['image'] . "',                            `price` = '" . $aValue['price'] . "',                            `prefix` = '" . $aValue['prefix'] . "',                            `sort_order` = '" . $aValue['sort_order'] . "',                            `min_size` = '" . (int) $value['min_size'] . "',                            `max_size` = '" . (int) $value['max_size'] . "'";                    $this->db->query($sql);                    $product_option_value_id = $this->db->getLastId();                    $sql = "INSERT INTO `product_option_value_description`                            SET product_option_value_id = '" . $product_option_value_id . "',                                product_id = '" . $product_id . "',                                language_id = '" . $aValue['language_id'] . "',                                name = '" . $aValue['name'] . "',                                help = '" . $value['help'] . "'";                    $this->db->query($sql);                }            }        }    }    public function removeOption($option_id) {        $sql = "DELETE FROM `product_option` WHERE product_option_id = '" . $option_id . "'";        $this->db->query($sql);        $sql = "DELETE FROM `product_option_description` WHERE product_option_id = '" . $option_id . "'";        $this->db->query($sql);        $sql = "SELECT * FROM `product_option_value` WHERE product_option_id = '" . $option_id . "'";        $query = $this->db->query($sql);        $option_values = $query->rows;        foreach ($option_values as $option_value) {            $this->removeOptionValue($option_value['product_option_value_id']);        }        $this->cache->delete('option');    }    public function removeOptionValue($option_value_id) {        $sql = "DELETE FROM `product_option_value` WHERE product_option_value_id = '" . $option_value_id . "'";        $this->db->query($sql);        $sql = "DELETE FROM `product_option_value_description` WHERE product_option_value_id = '" . $option_value_id . "'";        $this->db->query($sql);        $this->cache->delete('option');    }    public function getOptionValues($option_id) {        $sql = "SELECT ov.*, ovd.language_id, ovd.name, ovd.help";        $sql .= " FROM `product_option_value` ov";        $sql .= " INNER JOIN `product_option_value_description` ovd ON ovd.product_option_value_id=ov.product_option_value_id";        $sql .= " WHERE ov.product_option_id = " . $option_id . "  AND ov.product_id = -1";        $sql .= " ORDER BY sort_order, name";        $query = $this->db->query($sql);        $option_values = array();        if ($query->num_rows) {            foreach ($query->rows as $aValue) {                $option_values[] = $aValue;            }        }        return $option_values;    }    public function getOptionsByName($option_name, $option_id) {        if ($option_name) {            $sql = "SELECT * FROM `product_option_value_description` d LEFT JOIN `product_option_value` o  ON o.product_option_value_id = d.product_option_value_id WHERE LCASE(`name`) LIKE '%" . strtolower($option_name) . "%' AND o.product_option_id = ".(int) $option_id." AND o.product_id = -1";            $query = $this->db->query($sql);            return $query->rows;        }        return false;    }    public function getGeneralOptionsByName($option_id) {            $sql = "SELECT * FROM `product_option_value_description` d LEFT JOIN `product_option_value` o  ON o.product_option_value_id = d.product_option_value_id WHERE o.product_option_id = ".(int) $option_id;            $query = $this->db->query($sql);            return $query->rows;        return false;    }    public function getGeneralOptions() {        $sql = "SELECT *";        $sql .= " FROM `product_option` o";        $sql .= " INNER JOIN `product_option_description` od ON o.product_option_id=od.product_option_id";        $sql .= " WHERE o.product_id = -1";        $sql .= " ORDER BY sort_order, name";        $query = $this->db->query($sql);        return $query->rows;    }    public function getParentOptions($product_id) {        $sql = "SELECT *";        $sql .= " FROM `product_option` o";        $sql .= " INNER JOIN `product_option_description` od ON o.product_option_id=od.product_option_id";        $sql .= " WHERE o.product_id = " . $product_id . " AND o.product_option_type_id = 4";        $sql .= " ORDER BY sort_order, name";        $query = $this->db->query($sql);        return $query->rows;    }    public function getOptionTypes() {        $sSql = "SELECT * FROM `product_option_type`";        $query = $this->db->query($sSql);        return $query->rows;    }        public function getTotalQty($product_id){        $sSql = "SELECT SUM(quantity) qty FROM product_option_value WHERE product_id = ".(int) $product_id;        $query = $this->db->query($sSql);        return $query->row['qty'];    }    public function getOptions($product_id) {        $options = array();        $sql = "SELECT *";        $sql .= " FROM `product_option` o";        $sql .= " INNER JOIN `product_option_description` od ON o.product_option_id=od.product_option_id";        $sql .= " WHERE o.product_id = " . $product_id;        $sql .= " ORDER BY sort_order, name";        $query = $this->db->query($sql);        if ($query->num_rows) {            $rows = $query->rows;            foreach ($rows as $row) {                $sql = "SELECT ov.*, ovd.language_id, ovd.name, ovd.help";                $sql .= " FROM `product_option_value` ov";                $sql .= " INNER JOIN `product_option_value_description` ovd ON ovd.product_option_value_id=ov.product_option_value_id";                $sql .= " WHERE ov.product_option_id = " . $row['product_option_id'];                $sql .= " ORDER BY sort_order, name";                $query = $this->db->query($sql);                $option_values = array();                if ($query->num_rows) {                    foreach ($query->rows as $aValue) {                        $thumb = 'no_image.jpg';                        if ($aValue['thumb'] && file_exists(DIR_IMAGE . $aValue['thumb'])) {                            $thumb = $aValue['thumb'];                        }                        $image = 'no_image.jpg';                        if ($aValue['image'] && file_exists(DIR_IMAGE . $aValue['image'])) {                            $image = $aValue['image'];                        }                        $option_values[] = array_merge($aValue, array(                            'thumb_src' => HTTPS_IMAGE . $thumb,                            'image_src' => HTTPS_IMAGE . $image,                                ));                    }                }                $options[] = array_merge($row, array(                    'option_values' => $option_values                        ));            }        }        //QS::d($options);        return $options;    }}?>