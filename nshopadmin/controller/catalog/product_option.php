<?php/** To change this template, choose Tools | Templates* and open the template in the editor.*/class ControllerCatalogProductOption extends Controller {    private $error = array();    private $img_folder = 'option';    public function index() {        $this->load->language('catalog/product_option');        $this->document->title = $this->language->get('heading_title');        $this->load->model('catalog/product_option');//        $this->load->model('catalog/product');        $this->getForm();    }    public function addGeneral() {//d($this->request->post,1);        $this->load->language('catalog/product_option');        $this->document->title = $this->language->get('heading_title');        $this->load->model('catalog/product_option');        if (($this->request->server['REQUEST_METHOD'] == 'POST')) {            if ($this->request->post['option_id']) {                //d($this->request->post,true);                $this->model_catalog_product_option->addGeneralOption($this->request->get['product_id'], $this->request->post['option_id'], $this->request->post['values']);            }            $this->session->data['success'] = $this->language->get('text_success');            $url = '';            if (isset($this->request->get['filter_category'])) {                $url .= '&filter_category=' . $this->request->get['filter_category'];            }            if (isset($this->request->get['filter_name'])) {                $url .= '&filter_name=' . $this->request->get['filter_name'];            }            if (isset($this->request->get['filter_model'])) {                $url .= '&filter_model=' . $this->request->get['filter_model'];            }            if (isset($this->request->get['filter_type'])) {                $url .= '&filter_type =' . $this->request->get['filter_type'];            }            if (isset($this->request->get['filter_quantity'])) {                $url .= '&filter_quantity=' . $this->request->get['filter_quantity'];            }            if (isset($this->request->get['filter_status'])) {                $url .= '&filter_status=' . $this->request->get['filter_status'];            }            if (isset($this->request->get['page'])) {                $url .= '&page=' . $this->request->get['page'];            }            if (isset($this->request->get['sort'])) {                $url .= '&sort=' . $this->request->get['sort'];            }            if (isset($this->request->get['order'])) {                $url .= '&order=' . $this->request->get['order'];            }            $this->redirect(HTTPS_SERVER . 'catalog/product_option&token=' . $this->session->data['token'] . '&product_id=' . $this->request->get['product_id'] . '&type=' . $this->request->get['type'] . $url);        }        $this->getForm();    }    public function insert() {        $this->load->language('catalog/product_option');        $this->document->title = $this->language->get('heading_title');        $this->load->model('catalog/product_option');        if (($this->request->server['REQUEST_METHOD'] == 'POST') || ($this->request->server['REQUEST_METHOD'] == 'GET' && isset($this->request->get['option_id']))) {            if (isset($this->request->get['option_id']) && $this->request->get['option_id']) {                $this->model_catalog_product_option->addGeneralOption($this->request->get['product_id'], $this->request->get['option_id'], $this->request->get['values']);                $this->session->data['success'] = $this->language->get('text_success');            } else if (($this->request->server['REQUEST_METHOD'] == 'POST')) {                if ($this->validateForm()) {                    $data = $this->request->post;                    $this->model_catalog_product_option->addOption($this->request->get['product_id'], $data);                    $this->session->data['success'] = $this->language->get('text_success');                } else {                    $this->session->data['error'] = $this->error['warning'];                }            }            $url = '';            if (isset($this->request->get['filter_country'])) {                $url .= '&filter_country=' . $this->request->get['filter_country'];            }            if (isset($this->request->get['filter_category'])) {                $url .= '&filter_category=' . $this->request->get['filter_category'];            }            if (isset($this->request->get['filter_name'])) {                $url .= '&filter_name=' . $this->request->get['filter_name'];            }            if (isset($this->request->get['filter_model'])) {                $url .= '&filter_model=' . $this->request->get['filter_model'];            }            if (isset($this->request->get['filter_type'])) {                $url .= '&filter_type =' . $this->request->get['filter_type'];            }            if (isset($this->request->get['filter_quantity'])) {                $url .= '&filter_quantity=' . $this->request->get['filter_quantity'];            }            if (isset($this->request->get['filter_status'])) {                $url .= '&filter_status=' . $this->request->get['filter_status'];            }            if (isset($this->request->get['page'])) {                $url .= '&page=' . $this->request->get['page'];            }            if (isset($this->request->get['sort'])) {                $url .= '&sort=' . $this->request->get['sort'];            }            if (isset($this->request->get['order'])) {                $url .= '&order=' . $this->request->get['order'];            }            $this->redirect(HTTPS_SERVER . 'catalog/product_option&token=' . $this->session->data['token'] . '&product_id=' . $this->request->get['product_id'] . '&type=' . $this->request->get['type'] . $url);        }        $this->getForm();    }    private function getForm() {        $this->data['entry_language'] = $this->language->get('entry_language');        $this->data['entry_sort_order'] = $this->language->get('entry_sort_order');        $this->data['entry_avl_option_image'] = $this->language->get('entry_avl_option_image');        $this->data['entry_option'] = $this->language->get('entry_option');        $this->data['entry_option_value'] = $this->language->get('entry_option_value');        $this->data['entry_option_help'] = $this->language->get('entry_option_help');        $this->data['entry_quantity'] = $this->language->get('entry_quantity');        $this->data['entry_subtract'] = $this->language->get('entry_subtract');        $this->data['entry_geo_zone'] = $this->language->get('entry_geo_zone');        $this->data['entry_prefix'] = $this->language->get('entry_prefix');        $this->data['entry_price'] = $this->language->get('entry_price');        $this->data['entry_action'] = $this->language->get('entry_action');        $this->data['entry_option_type'] = $this->language->get('entry_option_type');        $this->data['entry_parent_type'] = $this->language->get('entry_parent_type');        $this->data['entry_max_text'] = $this->language->get('entry_max_text');        $this->data['entry_min_text'] = $this->language->get('entry_min_text');        $this->data['text_yes'] = $this->language->get('text_yes');        $this->data['text_no'] = $this->language->get('text_no');        $this->data['text_minus'] = $this->language->get('text_minus');        $this->data['text_plus'] = $this->language->get('text_plus');        $this->data['button_save'] = $this->language->get('button_save');        $this->data['button_cancel'] = $this->language->get('button_cancel');        $this->data['button_add_option'] = $this->language->get('button_add_option');        $this->data['button_add_option_value'] = $this->language->get('button_add_option_value');        $url = '&token=' . $this->session->data['token'];        if (isset($this->request->get['filter_country'])) {            $url .= '&filter_country=' . $this->request->get['filter_country'];        }        if (isset($this->request->get['filter_category'])) {            $url .= '&filter_category=' . $this->request->get['filter_category'];        }        if (isset($this->request->get['filter_name'])) {            $url .= '&filter_name=' . $this->request->get['filter_name'];        }        if (isset($this->request->get['filter_model'])) {            $url .= '&filter_model=' . $this->request->get['filter_model'];        }        if (isset($this->request->get['filter_type'])) {            $url .= '&filter_type =' . $this->request->get['filter_type'];        }        if (isset($this->request->get['filter_quantity'])) {            $url .= '&filter_quantity=' . $this->request->get['filter_quantity'];        }        if (isset($this->request->get['filter_status'])) {            $url .= '&filter_status=' . $this->request->get['filter_status'];        }        if (isset($this->request->get['page'])) {            $url .= '&page=' . $this->request->get['page'];        }        if (isset($this->request->get['sort'])) {            $url .= '&sort=' . $this->request->get['sort'];        }        if (isset($this->request->get['order'])) {            $url .= '&order=' . $this->request->get['order'];        }        if (isset($this->error['warning'])) {            $this->data['error_warning'] = $this->error['warning'];        } else if (isset($this->session->data['error'])) {            $this->data['error_warning'] = $this->session->data['error'];            unset($this->session->data['error']);        } else {            $this->data['error_warning'] = '';        }        if (isset($this->error['name'])) {            $this->data['error_name'] = $this->error['name'];        } else {            $this->data['error_name'] = '';        }        if (isset($this->error['value_name'])) {            $this->data['error_value_name'] = $this->error['value_name'];        } else {            $this->data['error_value_name'] = '';        }        if (isset($this->error['value_price'])) {            $this->data['error_value_price'] = $this->error['value_price'];        } else {            $this->data['error_value_price'] = '';        }        if (isset($this->session->data['success'])) {            $this->data['success'] = $this->session->data['success'];            unset($this->session->data['success']);        } else {            $this->data['success'] = '';        }        $this->document->breadcrumbs = array();        $this->document->breadcrumbs[] = array(            'href' => HTTPS_SERVER . 'common/home',            'text' => $this->language->get('text_home'),            'separator' => FALSE        );        if(!isset($this->request->get['product_id'])) {            $this->request->get['product_id'] = -1;        }        if (isset($this->request->get['product_id']) && $this->request->get['product_id'] != -1) {            $this->document->breadcrumbs[] = array(                'href' => HTTPS_SERVER . 'catalog/product/update&product_id=' . $this->request->get['product_id'] . $url,                'text' => __('Product'),                'separator' => ' :: '            );        }        $this->document->breadcrumbs[] = array(            'href' => HTTPS_SERVER . 'catalog/product_option&token=' . $this->session->data['token'] . '&product_id=' . $this->request->get['product_id'],            'text' => $this->language->get('heading_title'),            'separator' => ' :: '        );        $this->data['action'] = HTTPS_SERVER . 'catalog/product_option/insert&product_id=' . $this->request->get['product_id'] . '&type=' . $this->request->get['type'] . $url;        if(isset($this->request->get['product_id']) && $this->request->get['product_id'] != -1) {            $this->data['cancel'] = HTTPS_SERVER . 'catalog/product/update&product_id=' . $this->request->get['product_id'] . '&type=' . $this->request->get['type'] . $url;        }        else {            $this->data['cancel'] = makeUrl('common/home');        }        $this->data['removeOption'] = HTTPS_SERVER . 'catalog/product_option/removeOption&token=' . $this->session->data['token'] . '&product_id=' . $this->request->get['product_id'] . '&type=' . $this->request->get['type'];        $this->data['removeOptionValue'] = HTTPS_SERVER . 'catalog/product_option/removeOptionValue&token=' . $this->session->data['token'] . '&product_id=' . $this->request->get['product_id'] . '&type=' . $this->request->get['type'];        $this->data['token'] = $this->session->data['token'];//        $this->load->model('localisation/language');        $oLanguage = Make::a('localisation/language')->create();        $this->data['languages'] = $oLanguage->getLanguages();        $this->load->model('localisation/geo_zone');        $this->data['product_id'] = $this->request->get['product_id'];        $this->data['product_type'] = $this->request->get['type'];        $this->data['options'] = $this->model_catalog_product_option->getOptions($this->request->get['product_id']);        $this->data['option_types'] = CHtml::listData($this->model_catalog_product_option->getOptionTypes(), 'id', 'type');        $this->data['parent_options'] = CHtml::listData($this->model_catalog_product_option->getParentOptions($this->request->get['product_id']), 'product_option_id', 'name', '', 'Select Option');        $this->data['general_options'] = CHtml::listData($this->model_catalog_product_option->getGeneralOptions(), 'product_option_id', 'name', '', 'Select Option');        $oProduct = Make::a('catalog/product')->create();        $product_info = $oProduct->getProduct($this->request->get['product_id']);        if ($product_info) {            $this->data['heading_title'] = $this->language->get('heading_title') . ' ' . $product_info['name'];        } else {            $this->data['heading_title'] = $this->language->get('heading_title');        }        $this->data['directory'] = $this->img_folder;        $this->document->addScriptInline("        function bindFileUpload() {            $('.fileupload').fileupload({                url: '".makeUrl("common/filemanager/upload")."',                dataType: 'json',                dropZone: $(this).parent(),                beforeSend: function() {                    $('#processing').html('Processing...Please wait').show();                },                done: function(e,data) {                    var result = data.result;                    var type = $(this).attr('rel');                    var option = $(this).data('option-id');                    if(!result.hasOwnProperty('error')) {                        $('#option_value_'+option+'_'+type+'_preview').attr('src','".HTTP_IMAGE."data/$this->img_folder/'+data.files[0].name);                        $('#option_value_'+option+'_'+type).val('data/$this->img_folder/'+data.files[0].name);                    }                    else {                        alert(result.error);                    }                    $('#processing').hide();                }            });        }        $(document).on('click','.add_option',function(e) {            bindFileUpload();        });        bindFileUpload();",Document::POS_READY);        $this->template = 'catalog/product_option_form.tpl';        $this->response->setOutput($this->render(), $this->config->get('config_compression'));    }    private function validateForm() {        if (!$this->user->hasPermission('modify', 'catalog/product_option')) {            $this->error['warning'] = $this->language->get('error_permission');        }        if(isset($this->request->post['option']['old'])){            foreach ($this->request->post['option']['old'] as $opt_id => $option) {                if ($option['name'] == '' || strlen($option['name']) < 3 || strlen($option['name']) > 64) {                    $this->error['name']['old'][$opt_id] = __('error_name');                }            }        }        if(isset($this->request->post['option']['new'])){            foreach ($this->request->post['option']['new'] as $opt_id => $option) {                if ($option['name'] != '' && (strlen($option['name']) < 3 || strlen($option['name']) > 64 )) {                    $this->error['name']['new'][$opt_id] = __('error_name');                }            }        }        if(isset($this->request->post['option_value']['old'])){            foreach ($this->request->post['option_value']['old'] as $opt_id => $option_value) {                if ($option_value['name'] == '' || strlen($option_value['name']) < 1 || strlen($option_value['name']) > 64) {                    $this->error['value_name']['old'][$opt_id] = __('error_value_name');                }                if (isset($option_value['price']) && $option_value['price'] && !is_numeric($option_value['price'])) {                    $this->error['value_price']['old'][$opt_id] = __('error_value_price');                }            }        }        if(isset($this->request->post['option_value']['new'])){            foreach ($this->request->post['option_value']['new'] as $opt_id => $option_value) {                if ($option_value['name'] != '' && (strlen($option_value['name']) < 1 || strlen($option_value['name']) > 64 )) {                    $this->error['value_name']['new'][$opt_id] = __('error_value_name');                }                if (isset($option_value['price']) && $option_value['price'] && !is_numeric($option_value['price'])) {                    $this->error['value_price']['new'][$opt_id] = __('error_value_price');                }            }        }        //d($this->error,1);        if (!$this->error) {            $this->error['warning'] = $this->language->get('error_warning');            return TRUE;        } else {            return FALSE;        }    }    private function validateDelete() {        if (!$this->user->hasPermission('modify', 'catalog/product_option')) {            $this->error['warning'] = $this->language->get('error_permission');        }        if (!$this->error) {            return TRUE;        } else {            return FALSE;        }    }    public function removeOption() {        $this->load->language('catalog/product_option');        $this->document->title = $this->language->get('heading_title');        $this->load->model('catalog/product_option');        $this->model_catalog_product_option->removeOption($this->request->get['option_id']);        $this->session->data['success'] = $this->language->get('text_success');        $this->redirect(HTTPS_SERVER . 'catalog/product_option&token=' . $this->session->data['token'] . '&product_id=' . $this->request->get['product_id'] . '&type=' . $this->request->get['type']);        $this->getForm();    }    public function removeOptionValue() {        $this->load->language('catalog/product_option');        $this->document->title = $this->language->get('heading_title');        $this->load->model('catalog/product_option');        $this->model_catalog_product_option->removeOptionValue($this->request->get['option_value_id']);        $this->session->data['success'] = $this->language->get('text_success');        $this->redirect(HTTPS_SERVER . 'catalog/product_option&token=' . $this->session->data['token'] . '&product_id=' . $this->request->get['product_id'] . '&type=' . $this->request->get['type']);        $this->getForm();    }    public function generalOption() {        $this->load->model('catalog/product_option');        $aOptions = $this->model_catalog_product_option->getOptionsByName($this->request->post['name'],$this->request->post['option_id']);        $aResults = array();        foreach ($aOptions as $aOption) {            $aResults['options'][] = array(                'id' => $aOption['product_option_value_id'],                'value' => $aOption['name']            );        }        $this->response->setOutput(json_encode($aResults), $this->config->get('config_compression'));    }    public function getGeneralOption() {        $this->load->model('catalog/product_option');        $aOptions = $this->model_catalog_product_option->getGeneralOptionsByName($this->request->post['option_id']);        $aResults = array();        foreach ($aOptions as $aOption) {            $aResults['options'][] = array(                'id' => $aOption['product_option_value_id'],                'value' => $aOption['name']            );        }        $this->response->setOutput(json_encode($aResults), $this->config->get('config_compression'));    }    public function generalValue() {        $this->load->model('catalog/product_option');        $aOptions = $this->model_catalog_product_option->getOptionValues($this->request->post['option_id']);        $aResults = array();        foreach ($aOptions as $aOption) {            $aResults['values'][] = array(                'id' => $aOption['product_option_value_id'],                'value' => $aOption['name']            );        }        $this->response->setOutput(json_encode($aResults), $this->config->get('config_compression'));    }}